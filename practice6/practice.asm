    org 100h ; DOS кладет наш код начиная с адреса 100h.
    ; Мы находимся в рельном режиме, все сегменты имеют одно неизвестное заранее значение.
section .text

    ; Получим базу сегмента
    xor eax,eax
    mov ax, ds
    shl eax, 4 ; База = 16 * ds
    ; Прибавим к ней смещение начала таблицы дескрипторов сегментов
    add eax, gdt
    ; Сохраним полученный абсолютный адрес в псевдо-дескрипторе
    mov [gdtBase], eax

    ; Запрет прерываний
    cli
    ; Загрузка таблицы дескрипторов сегментов
    lgdt [gdtDesc]
    ; Загрузка пустой таблицы векторов прерываний
    lidt [idtDesc]

    ; Включение защищенного режима
    mov eax, 1 ; PE
    mov cr0, eax

    ; Переход в новый сегмент
    xor eax, eax
    mov ax, ds
    shl eax, 4
    mov ebx, eax ; Сохраним базу старого сегмента, иначе больше никогда не найдем наши данные.
    add eax, protected ; В eax - абсолютный адрес метки protected
    ; Кладем на стек сегментный селектор и смещение
    push dword 08h
    push eax
    ; "Дальний" возврат - со стека берется и сегментный селектор, и смещение.
    ; o32 означает, что используется 32-битный операнд. Со стека возьмется два раза по 32 бита.
    o32 retf
protected:
    ; Теперь мы находимся в 32-битном сегменте, поэтому по умолчанию размер операнда 32 бита.
    use32
    ; Инициализируем сегменты данных и стека вторым селектором
    mov ax, 10h
    mov ds, ax
    mov ss, ax
    mov es, ax

    ; Вывод строки на экран.
    ; Абсолютный адрес начала текстовой видеопамяти - 0xb8000
    ; 25 строк по 80 символов, 2 байта на символ (сам символ и его цвет).
    ; Выводим примерно посередине - 12 строка, 35 столбец
    mov edi, 0xb8000 + 160*12 + 35*2
    ; ebx содержит старую базу сегмента, относительно нее у нас все метки.
    lea esi, [ebx + hello]
    mov ecx, helloLen
    rep movsb
    hlt ; Дальше сделать ничего нельзя, поэтому просто останов процессора.


section .data ; Не обязательно, в COM-файле нет секций.

    COL equ 0xf0 ; Цвет - фон f (ярко-белый), текст 0 (черный).
    hello: db 'I', COL, 3, 0xf5, '3', COL, '2', COL, 'b', COL, 'i', COL, 't', COL
    helloLen equ $-hello

    align 16
; Таблица дескрипторов сегментов. Содержит три дескриптора (из них два содержательных).
; У обоих дескрипторов база 0 и лимит максимальный.
gdt:
    ; Нулевой дескриптор, не используется процессором. 
    dq 0 ; null descriptor
    ; Дескриптор кодового сегмента.
    ; code
    dw 0xffff ; limit
    dw 0x0000 ; base
    dw 1001101000000000b ; P=1, DPL=00, S=1, Type=1010
    db 11001111b ; G=1, D/B=1
    db 0 ; more base
    ; Дескриптор сегмента данных
    ; data
    dw 0xffff ; limit
    dw 0x0000 ; base
    dw 1001001000000000b ; P=1, DPL=00, S=1, Type=0010
    db 11001111b ; G=1, D/B=1
    db 0 ; more base
gdtSize equ $-gdt

    align 16
; Псевдо-дескриптор для загрузки с помощью lgdt
gdtDesc:
    dw gdtSize-1 ; Лимит, должен быть на 1 меньше размера.
gdtBase: dd 0 ; База. До запуска программы неизвестна.

    align 16
; Пустой псевдо-дескриптор таблицы векторов прерываний для загрузки с помощью lidt
idtDesc:
    dw 0 ;limit
    dd 0 ;base
